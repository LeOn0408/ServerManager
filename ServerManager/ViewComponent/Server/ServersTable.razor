@using ServerManager.Data.Server;
@using ServerManagerCore.Models;
@using ServerManagerCore.Services;
@inject  ServerDataService ServerData
<ModalCard OnClickMethodCallback="MethodCard" OnClickExitCallback="Exit">
    <ServerInfo SelectedServer=@_selectServerDto></ServerInfo>
</ModalCard>
<PageTitle>Панель администратора</PageTitle>

<button type="button" class="btn btn-primary my-2" data-bs-toggle="modal" data-bs-target="#staticBackdrop">Добавить сервер</button>
<table class="table">
    <thead>
        <tr>
            <th>Тип</th>
            <th>Наименование</th>
            <th>Локальный адрес</th>
            <th>Публичный адрес</th>
            <th>Статус</th>
            <th>Карта</th>
            <th>Количество игроков</th>
            <th></th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
    @foreach (var server in _servers)
    {
        <tr>
            <td>@GetTypeServers(server.TypeServer)</td>
            <td>@server.Name</td>
            <td>@server.IpAddress</td>
            <td>@server.ServerPublicInfo.IP</td>
            <td>
                @*<p class="placeholder-glow">
                  <span class="placeholder col-12"></span>
                </p>*@
                @if (server.Launched)
                {
                    <span>Запущен</span>
                }
                else
                {
                    <span>Недоступен</span>
                }

            </td>
            <td>
                @server.ServerPublicInfo.Map
            </td>
            <td>
                @TotalPlayersAllServers.Where(s => s.Id == server.Id).Count()
            </td>

            <td class="col-1"><button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#staticBackdrop" @onclick="@(() => ShowServer(server))">Задачи</button></td>
            <td class="col-1"><button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#staticBackdrop" @onclick="@(() => ShowServer(server))">Изменить</button></td>
            <td class="col-1"><button type="button" class="btn btn-danger">Удалить</button></td>
        </tr> 
    }
    </tbody>
</table>

@code {
    private List<CoreModels.ServerDto> _servers { get; set; } = new();

    private List<Player> TotalPlayersAllServers { get; set; } = new();

    private CoreModels.ServerDto _selectServerDto = new();

    protected override async Task OnInitializedAsync()
    {
        _servers = await ServerData.GetAllAsync();
        foreach(var server in _servers)
        {
            var serverService = new ServerServices(ServerData, server);
            var player = serverService.SavePlayerInfo();
            var publicInfo = serverService.SavePublicInfo();
            var onlinePlayers = await serverService.GetPlayersInfo();
            if (onlinePlayers != null)
                TotalPlayersAllServers.AddRange(onlinePlayers);
        }
    }
    private string GetTypeServers(CoreModels.TypeServer serverTypeServer) => serverTypeServer switch
    {
        CoreModels.TypeServer.Ark => "Ark",
        CoreModels.TypeServer.Minecraft => "Minecraft",
        _ => "unknown"
    };
    private void MethodCard()
    {
        if (_selectServerDto.Id == 0)
            AddServer();
        else
            EditServer();
        _selectServerDto = new CoreModels.ServerDto();
        StateHasChanged();
    }

    private async void AddServer()
    {

        _servers.Add(await ServerData.AddServerInfoAsync(_selectServerDto));
    }

    private async void EditServer()
    {
        var select = await ServerData.EditServerInfoAsync(_selectServerDto);
        var editServer = _servers.FirstOrDefault(s => s.Id == select.Id);
        editServer = select;
    }
    private void Exit()
    {
        _selectServerDto = new CoreModels.ServerDto();
    }

    private void ShowServer(CoreModels.ServerDto serverDto)
    {
        _selectServerDto = serverDto;
        
        StateHasChanged();
    }

}